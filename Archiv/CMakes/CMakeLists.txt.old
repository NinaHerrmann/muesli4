# Top CMakeLists.txt     
cmake_minimum_required(VERSION 3.15)
project(Muesli VERSION 3.3.1)
enable_language(CUDA CXX)

message("Muesli Version " ${PROJECT_VERSION})

# required macros
include(CheckCXXCompilerFlag)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# config status messages
message(STATUS "Host System: " ${CMAKE_HOST_SYSTEM})

message(STATUS "compiler id: " ${CMAKE_CXX_COMPILER_ID})
message(STATUS "compiler flags: " ${CMAKE_CXX_FLAGS})
message(STATUS "compiler flags debug: " ${CMAKE_CXX_FLAGS_DEBUG})
message(STATUS "compiler flags release: " ${CMAKE_CXX_FLAGS_RELEASE})
message(STATUS "compiler flags minsizerel: " ${CMAKE_CXX_FLAGS_MINSIZEREL})
message(STATUS "compiler flags relwithdebinfo: " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

# set default build type, if not specified otherwise
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the build type: Debug, Release, RelWithDebInfo, or MinSizeRel. " FORCE)
endif(NOT CMAKE_BUILD_TYPE)

message("Build type is: " ${CMAKE_BUILD_TYPE})

if(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}" CACHE PATH "Set the runtime output directory (default: ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})." FORCE)
endif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)

if(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}" CACHE PATH "Set the library output directory (default: ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})." FORCE)
endif(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)

if(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}" CACHE PATH "Set the archive output directory (default: ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})." FORCE)
endif(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)


message("Muesli installation path: " ${CMAKE_INSTALL_PREFIX})
message("Example build output directory: " ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})


####################################################################################################
# find libs: MPI, OpenMP, and CUDA

## MPI
### workaround for MS-MPI on Windows
if (WIN32) # taken from http://public.kitware.com/pipermail/cmake/2015-February/059979.html
  #This is for finding MS-MPI.
  #set(_MPI_PREFIX_PATH)
  #list(APPEND _MPI_PREFIX_PATH "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MPI;Path]/..")
  set(MPIEXEC "C:/Program Files/Microsoft MPI/Bin/mpiexec.exe")
  # For building MPI programs the selected Visual Studio compiler is used, namely cl.exe.
  # So there is no need to set a specific MPI compiler.
  #set(MPI_CXX_COMPILER "${CMAKE_CXX_COMPILER}")
  set(MPI_CXX_INCLUDE_PATH "C:/Program Files (x86)/Microsoft SDKs/MPI/Include")
  # Make sure the correct libraries (64-bit or 32-bit) are selected.
  # Decide between 32-bit and 64-bit libraries for Microsoft's MPI
  if ("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(MS_MPI_ARCH_DIR x64)
  else ("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(MS_MPI_ARCH_DIR x86)
  endif ("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
  set(MPI_CXX_LIBRARIES "C:/Program Files (x86)/Microsoft SDKs/MPI/Lib/${MS_MPI_ARCH_DIR}/msmpi.lib")
  set(MPI_C_INCLUDE_PATH "${MPI_CXX_INCLUDE_PATH}")
  set(MPI_C_LIBRARIES "{${MPI_CXX_LIBRARIES}")
else (WIN32)
  find_package(MPI REQUIRED)
endif (WIN32)

### this is a cmake bug: MPI link flags are preceeded by two whitespaces, which leads to one leading whitespace, which is now an error according to policy CMP0004.
string(STRIP "${MPI_CXX_LINK_FLAGS}" MPI_CXX_LINK_FLAGS)

message(STATUS "mpi compiler: " ${MPI_CXX_COMPILER})
message(STATUS "mpi compile flags: " ${MPI_CXX_COMPILE_FLAGS})
message(STATUS "mpi link flags: " ${MPI_CXX_LINK_FLAGS})
message(STATUS "mpi libraries: " ${MPI_CXX_LIBRARIES})
message(STATUS "mpi include paths: " ${MPI_CXX_INCLUDE_PATH})

## OpenMP
find_package(OpenMP)

if (OPENMP_FOUND)
  message(STATUS "OpenMP CXX compiler flags: " ${OpenMP_CXX_FLAGS})
endif (OPENMP_FOUND)

## CUDA
cmake_policy(SET CMP0074 OLD)
find_package(CUDA)

####################################################################################################
# check supported compiler flags

## check supported flags
### common
check_cxx_compiler_flag(-Wall compiler_flag_wall)
check_cxx_compiler_flag(-m64 compiler_flag_m64)
check_cxx_compiler_flag(-fno-strict-aliasing compiler_flag_fno_strict_aliasing)
check_cxx_compiler_flag(-DMPICH_IGNORE_CXX_SEEK compiler_flag_dmpich_ignore_cxx_seek)

### SEQ
check_cxx_compiler_flag(-Wno-unknown-pragmas compiler_flag_wno_unknown_pragmas)

### PHI
check_cxx_compiler_flag(-Wno-reorder compiler_flag_wno_reorder)
check_cxx_compiler_flag(-mmic compiler_flag_mmic)
check_cxx_compiler_flag(-vec-report1 compiler_flag_vec_report1)
check_cxx_compiler_flag(-DMPICH_SKIP_MPICXX compiler_flag_dmpich_skip_mpicxx)

####################################################################################################
# determine which variants are built

## SEQ
set(BUILD_SEQ true)
message("Build sequential variant.")

## CPU
if (OPENMP_FOUND)
  set(BUILD_CPU true)
  message("Build CPU variant.")
else (OPENMP_FOUND)
  message(WARNING "Do not build CPU variant. OpenMP not found.")
endif (OPENMP_FOUND)

## PHI
if (OPENMP_FOUND AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" AND compiler_flag_mmic)
  set(BUILD_PHI true)
  message("Build PHI variant.")
else (OPENMP_FOUND AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" AND compiler_flag_mmic)
  if (OPENMP_FOUND)
    message(WARNING "Do not build PHI variant. Intel compiler not available.")
  else (OPENMP_FOUND)
    message(WARNING "Do not build PHI variant. OpenMP not found.")
  endif (OPENMP_FOUND)
endif (OPENMP_FOUND AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" AND compiler_flag_mmic)

## GPU
if (CUDA_FOUND)
  set(BUILD_GPU true)
  message("Build GPU variant.")
else (CUDA_FOUND)
  message(WARNING "Do not build GPU variant. CUDA not found.")
endif (CUDA_FOUND)

####################################################################################################
# add the supported flags to variables

# receive all warnings
if (compiler_flag_wall)
  set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -Wall)
  set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-Wall\"")
endif (compiler_flag_wall)

# 64 bit architecture
if (compiler_flag_m64)
  set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -m64)
  set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-m64\"")
endif (compiler_flag_m64)

# allow non type conform aliasing
if (compiler_flag_fno_strict_aliasing)
  set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -fno-strict-aliasing)
  set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-fno-strict-aliasing\"")
endif (compiler_flag_fno_strict_aliasing)

# avoid specific MPICH problem
if (compiler_flag_dmpich_ignore_cxx_seek)
  set(COMMON_COMPILER_OPTIONS ${COMMON_COMPILER_OPTIONS} -DMPICH_IGNORE_CXX_SEEK)
  set(GPU_COMPILER_OPTIONS_HOST "${GPU_COMPILER_OPTIONS_HOST},\"-DMPICH_IGNORE_CXX_SEEK\"")
endif (compiler_flag_dmpich_ignore_cxx_seek)

## SEQ
if (compiler_flag_wno_unknown_pragmas)
  set(SEQ_COMPILER_OPTIONS ${SEQ_COMPILER_OPTIONS} -Wno-unknown-pragmas)
endif (compiler_flag_wno_unknown_pragmas)

## PHI
if (compiler_flag_wno_reorder)
  set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -Wno-reorder)
endif (compiler_flag_wno_reorder)

if (compiler_flag_mmic)
  set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -mmic)
endif (compiler_flag_mmic)

if (compiler_flag_vec_report1)
  set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -vec-report1)
endif (compiler_flag_vec_report1)

if (compiler_flag_dmpich_skip_mpicxx)
  set(PHI_COMPILER_OPTIONS ${PHI_COMPILER_OPTIONS} -DMPICH_SKIP_MPICXX)
endif (compiler_flag_dmpich_skip_mpicxx)

## GPU
if (BUILD_GPU)
  ## include directories
  cuda_include_directories(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/include/detail ${MPI_CXX_INCLUDE_PATH})

  ## NVCC flags
  set(CUDA_PROPAGATE_HOST_FLAGS "OFF") # these are manually set via -Xcompiler flag ( -Xcompiler "-flag -flag" )

# sm_30 = Kepler, language: C+11, enable __host__ and __device__ in lambda expressions
  set(GPU_COMPILER_OPTIONS "-arch=sm_30;-std=c++11;--expt-extended-lambda") # C++11 lambdas are still experimental in CUDA 7.5. This flag may be removed with CUDA 8.0
  set(GPU_COMPILER_OPTIONS_DEBUG "-g;-G;-O0")
  set(GPU_COMPILER_OPTIONS_RELEASE "-O3")
  set(GPU_COMPILER_OPTIONS_MINSIZEREL "-O2")
  set(GPU_COMPILER_OPTIONS_RELWITHDEBINFO "-g;-G;-O2")

  if (OPENMP_FOUND)
    foreach (flag ${OpenMP_CXX_FLAGS})
      string(CONCAT ESCAPED_OPENMP_FLAGS ${ESCAPED_OPENMP_FLAGS} ",\"${flag}\"")
    endforeach (flag ${OpenMP_CXX_FLAGS})
    string(CONCAT GPU_COMPILER_OPTIONS_HOST ${GPU_COMPILER_OPTIONS_HOST} "${ESCAPED_OPENMP_FLAGS}")
  endif (OPENMP_FOUND)

message(STATUS "common compiler options: " ${COMMON_COMPILER_OPTIONS})
message(STATUS "seq. compiler options: " ${SEQ_COMPILER_OPTIONS})
message(STATUS "Phi compiler options: " ${PHI_COMPILER_OPTIONS})
message(STATUS "GPU compiler options: " ${GPU_COMPILER_OPTIONS})

## build type flags
string(REPLACE " -" ";-" CMAKE_CXX_FLAGS_DEBUG_LIST ${CMAKE_CXX_FLAGS_DEBUG})
foreach (flag ${CMAKE_CXX_FLAGS_DEBUG_LIST})
  string(CONCAT GPU_COMPILER_OPTIONS_HOST_DEBUG ${GPU_COMPILER_OPTIONS_HOST_DEBUG} ",\"${flag}\"")
endforeach (flag ${CMAKE_CXX_FLAGS_DEBUG_LIST})

string(REPLACE " -" ";-" CMAKE_CXX_FLAGS_RELEASE_LIST ${CMAKE_CXX_FLAGS_RELEASE})
foreach (flag ${CMAKE_CXX_FLAGS_RELEASE_LIST})
  string(CONCAT GPU_COMPILER_OPTIONS_HOST_RELEASE ${GPU_COMPILER_OPTIONS_HOST_RELEASE} ",\"${flag}\"")
endforeach (flag ${CMAKE_CXX_FLAGS_RELEASE_LIST})

string(REPLACE " -" ";-" CMAKE_CXX_FLAGS_MINSIZEREL_LIST ${CMAKE_CXX_FLAGS_MINSIZEREL})
foreach (flag ${CMAKE_CXX_FLAGS_MINSIZEREL_LIST})
  string(CONCAT GPU_COMPILER_OPTIONS_HOST_MINSIZEREL ${GPU_COMPILER_OPTIONS_HOST_MINSIZEREL} ",\"${flag}\"")
endforeach (flag ${CMAKE_CXX_FLAGS_MINSIZEREL_LIST})

string(REPLACE " -" ";-" CMAKE_CXX_FLAGS_RELWITHDEBINFO_LIST ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
foreach (flag ${CMAKE_CXX_FLAGS_RELWITHDEBINFO_LIST})
  string(CONCAT GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO ${GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO} ",\"${flag}\"")
endforeach (flag ${CMAKE_CXX_FLAGS_RELWITHDEBINFO_LIST})

  string(CONCAT GPU_HOST_COMPILER_OPTIONS_DEBUG "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_DEBUG})
  string(CONCAT GPU_HOST_COMPILER_OPTIONS_RELEASE "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_RELEASE})
  string(CONCAT GPU_HOST_COMPILER_OPTIONS_MINSIZEREL "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_MINSIZEREL})
  string(CONCAT GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO "-Xcompiler " ${GPU_COMPILER_OPTIONS_HOST} ${GPU_COMPILER_OPTIONS_HOST_RELWITHDEBINFO})

message(STATUS "GPU host-compiler options (Debug): " ${GPU_COMPILER_OPTIONS_HOST_DEBUG})
message(STATUS "GPU host-compiler options (Release): " ${GPU_COMPILER_OPTIONS_HOST_RELEASE})
message(STATUS "GPU host-compiler options (Min. Size Release): " ${GPU_COMPILER_OPTIONS_MINSIZEREL})
message(STATUS "GPU host-compiler options (Release with Debug Info): " ${GPU_COMPILER_OPTIONS_HOST_RELWITHDEBINFO})

endif (BUILD_GPU)

####################################################################################################
# this custom target is required so that Muesli's header files show up in certain IDEs (such as visual studio)
# if the target is built, nothing actually happens

## find all muesli files
file(GLOB MUESLI_FILES
     ${PROJECT_SOURCE_DIR}/include/*.h
     ${PROJECT_SOURCE_DIR}/include/detail/*.h
     ${PROJECT_SOURCE_DIR}/include/*.cuh
     ${PROJECT_SOURCE_DIR}/include/detail/*.cuh
     ${PROJECT_SOURCE_DIR}/src/*.cpp
     ${PROJECT_SOURCE_DIR}/src/*.cu)

set_source_files_properties(${MUESLI_FILES} PROPERTIES HEADER_FILE_ONLY TRUE)
add_custom_target(muesli_ide SOURCES ${MUESLI_FILES})

####################################################################################################
# add muesli libs

set(MUESLI_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/muesli-${PROJECT_VERSION})
set(MUESLI_INCLUDE_INSTALL_DIR ${MUESLI_INSTALL_DIR}/include)
set(MUESLI_INCLUDE_DETAIL_INSTALL_DIR ${MUESLI_INCLUDE_INSTALL_DIR}/detail)

add_library(muesli INTERFACE)
target_include_directories(muesli INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/detail>
  $<BUILD_INTERFACE:${MPI_CXX_INCLUDE_PATH}>
  $<INSTALL_INTERFACE:${MUESLI_INCLUDE_INSTALL_DIR}>
  $<INSTALL_INTERFACE:${MUESLI_INCLUDE_INSTALL_DIR}/detail>
)
target_compile_options(muesli INTERFACE ${MPI_CXX_COMPILE_FLAGS} ${COMMON_COMPILER_OPTIONS})
target_link_libraries(muesli INTERFACE ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES})
target_compile_features(muesli INTERFACE cxx_auto_type cxx_lambdas cxx_nullptr cxx_uniform_initialization)

if (BUILD_SEQ)
  add_library(muesli_seq INTERFACE)
  target_compile_options(muesli_seq INTERFACE ${SEQ_COMPILER_OPTIONS})
  target_link_libraries(muesli_seq INTERFACE muesli)
endif (BUILD_SEQ)

if (BUILD_CPU)
  add_library(muesli_cpu INTERFACE)
  target_compile_options(muesli_cpu INTERFACE ${OpenMP_CXX_FLAGS} ${CPU_COMPILER_OPTIONS})
  target_link_libraries(muesli_cpu INTERFACE muesli ${OpenMP_CXX_FLAGS})
endif (BUILD_CPU)

if (BUILD_PHI)
  add_library(muesli_phi INTERFACE)
  target_compile_options(muesli_phi INTERFACE ${OpenMP_CXX_FLAGS} ${PHI_COMPILER_OPTIONS})
  target_link_libraries(muesli_phi INTERFACE muesli ${OpenMP_CXX_FLAGS} -mmic)
endif (BUILD_PHI)

## this does not work for CUDA at the moment --> no CUDA interface libraries in cmake
#if (BUILD_GPU)
#endif (BUILD_GPU)

####################################################################################################
# add install option

set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY true) #just copy files on install, don't build the examples

# cmake config files
configure_package_config_file(muesli-config.cmake.in
  ${PROJECT_BINARY_DIR}/muesli-config.cmake
  INSTALL_DESTINATION ${MUESLI_INSTALL_DIR}/cmake
  PATH_VARS MUESLI_INCLUDE_INSTALL_DIR MUESLI_INCLUDE_DETAIL_INSTALL_DIR 
  NO_CHECK_REQUIRED_COMPONENTS_MACRO)

write_basic_package_version_file(
  ${PROJECT_BINARY_DIR}/muesli-config-version.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMajorVersion )

install(FILES ${PROJECT_BINARY_DIR}/muesli-config.cmake
              ${PROJECT_BINARY_DIR}/muesli-config-version.cmake
        DESTINATION ${MUESLI_INSTALL_DIR}/cmake )

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/src DESTINATION ${MUESLI_INSTALL_DIR})


install(TARGETS muesli EXPORT muesli_targets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

if (BUILD_SEQ)
  install(TARGETS muesli_seq EXPORT muesli_targets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
endif (BUILD_SEQ)

if (BUILD_CPU)
  install(TARGETS muesli_cpu EXPORT muesli_targets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
endif (BUILD_CPU)

if (BUILD_PHI)
  install(TARGETS muesli_phi EXPORT muesli_targets
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
endif (BUILD_PHI)

install(EXPORT muesli_targets DESTINATION ${MUESLI_INSTALL_DIR}/${CMAKE_INSTALL_LIBDIR} NAMESPACE msl:: FILE muesli-lib-config.cmake)

####################################################################################################
# add custom targets. with those it is possible to build all seq, cpu, phi, or gpu targets

if (BUILD_SEQ)
  add_custom_target(seq)
endif (BUILD_SEQ)

if (BUILD_CPU)
  add_custom_target(cpu)
endif (BUILD_CPU)

if (BUILD_PHI)
  add_custom_target(phi)
endif (BUILD_PHI)

if (BUILD_GPU)
  add_custom_target(gpu)
endif (BUILD_GPU)

message(STATUS "all seq, cpu, phi, or gpu targets added")

####################################################################################################
# here starts the definition of the executables

## build one executable for each .cpp file in the examples folder
## use of glob is discouraged, so add each file separately
## names must be unique, folders are not considered
set(EXAMPLE_SRCS
## working examples (on Palma) (remove correspondig comment for a try)
## ${PROJECT_SOURCE_DIR}/examples/array_test.cpp
## ${PROJECT_SOURCE_DIR}/examples/farm_mandelbrot.cpp
## ${PROJECT_SOURCE_DIR}/examples/farm_test.cpp
## ${PROJECT_SOURCE_DIR}/examples/fold_cols_test.cpp
## ${PROJECT_SOURCE_DIR}/examples/fold_rows_test.cpp
## ${PROJECT_SOURCE_DIR}/examples/frobenius.cpp
## ${PROJECT_SOURCE_DIR}/examples/gaussian.cpp
## ${PROJECT_SOURCE_DIR}/examples/jacobi.cpp
## ${PROJECT_SOURCE_DIR}/examples/mandelbrot.cpp
## ${PROJECT_SOURCE_DIR}/examples/matmult.cpp
## ${PROJECT_SOURCE_DIR}/examples/matmult_no_tiling.cpp
## ${PROJECT_SOURCE_DIR}/examples/matrix_test.cpp
## ${PROJECT_SOURCE_DIR}/examples/raytracer.cpp
## ${PROJECT_SOURCE_DIR}/examples/farm_raytrace.cpp
## ${PROJECT_SOURCE_DIR}/examples/nbody.cpp
## ${PROJECT_SOURCE_DIR}/examples/farm_nbody.cpp
## ${PROJECT_SOURCE_DIR}/examples/nbody_no_tiling.cpp
## runs on GPU (correkt?); on 2 CPU-nodes with 4 Cores each: abort after time limit (2 h)
## ${PROJECT_SOURCE_DIR}/examples/canny.cpp  
## runs but abort at the end:
## ${PROJECT_SOURCE_DIR}/examples/shortest_paths.cpp
${PROJECT_SOURCE_DIR}/examples/da_test.cpp

## the following examples are missing and hence commented out
##  ${PROJECT_SOURCE_DIR}/examples/survey/sample/fold.cpp
##  ${PROJECT_SOURCE_DIR}/examples/survey/sample/mapIndex.cpp
##  ${PROJECT_SOURCE_DIR}/examples/survey/sample/zip.cpp
##  ${PROJECT_SOURCE_DIR}/examples/survey/error/arguments.cpp
##  ${PROJECT_SOURCE_DIR}/examples/survey/error/local_index.cpp
##  ${PROJECT_SOURCE_DIR}/examples/survey/error/fold_err.cpp
)

foreach (example_src ${EXAMPLE_SRCS})

  ### get name of current example
  get_filename_component(example_name ${example_src} NAME_WE)

  ### custom target to build all variants for one example
  add_custom_target(${example_name})

  ### Sequential executable
  if (BUILD_SEQ)
    add_executable(${example_name}_seq ${example_src})
    target_link_libraries(${example_name}_seq PRIVATE muesli_seq)

    ### add to custom targets
    add_dependencies(${example_name} ${example_name}_seq)
    add_dependencies(seq ${example_name}_seq)
    message(STATUS "sequential executable added: " ${example_name})
  endif (BUILD_SEQ)

  ### CPU executable
  if (BUILD_CPU)
    add_executable(${example_name}_cpu ${example_src})
    target_link_libraries(${example_name}_cpu PRIVATE muesli_cpu)

    ### add to custom targets
    add_dependencies(${example_name} ${example_name}_cpu)
    add_dependencies(cpu ${example_name}_cpu)
    message(STATUS "CPU executable added: " ${example_name})
  endif (BUILD_CPU)

  ### PHI executable (only possible with intel compiler)
  if (BUILD_PHI)
    add_executable(${example_name}_phi ${example_src})
    target_link_libraries(${example_name}_phi PRIVATE muesli_phi)

    ### add to custom targets
    add_dependencies(${example_name} ${example_name}_phi)
    add_dependencies(phi ${example_name}_phi)
    message(STATUS "Phi executable added: " ${example_name})
  endif (BUILD_PHI)

  ### GPU executable (only possible if CUDA is installed)
  if (BUILD_GPU)
    ### TODO: this is not too nice. The source file is a cpp. Therefore, it is build with default c++ compiler; however, we need nvcc. With CUDA_SOURCE_PROPERTY_FORMAT it is possible to compile cpp files with nvcc. However, this breaks the seq, cpu, and phi targets. Therefore, the next lines copy the file to a tmp folder in the build tree, which is used for the gpu target.
    ### possible "solution": should be possible to move this in another CMakeLists.txt file in another folder, then the properties are not valid for the other executables. However, not the whole build in one file anymore.
    get_filename_component(example_name_tmp ${example_src} NAME)
    set(example_src_tmp "tmp/${example_name_tmp}")
    configure_file(${example_src} "${example_src_tmp}")
    set_source_files_properties(${example_src_tmp} PROPERTIES CUDA_SOURCE_PROPERTY_FORMAT OBJ)

    ## if there is a header file, then copy it as well
    if (EXISTS "${PROJECT_SOURCE_DIR}/examples/${example_name}.h")
      configure_file(${PROJECT_SOURCE_DIR}/examples/${example_name}.h "tmp/${example_name}.h")
    endif (EXISTS "${PROJECT_SOURCE_DIR}/examples/${example_name}.h")

    ## build executable
    cuda_add_executable(${example_name}_gpu ${CMAKE_CURRENT_BINARY_DIR}/${example_src_tmp} OPTIONS ${GPU_COMPILER_OPTIONS} DEBUG ${GPU_COMPILER_OPTIONS_DEBUG} ${GPU_HOST_COMPILER_OPTIONS_DEBUG} RELEASE ${GPU_COMPILER_OPTIONS_RELEASE} ${GPU_HOST_COMPILER_OPTIONS_RELEASE} RELWITHDEBINFO ${GPU_COMPILER_OPTIONS_RELWITHDEBINFO} ${GPU_HOST_COMPILER_OPTIONS_RELWITHDEBINFO} MINSIZEREL ${GPU_COMPILER_OPTIONS_MINSIZEREL} ${GPU_HOST_COMPILER_OPTIONS_MINSIZEREL}) # copy hack: use copied file

    ## link libs
    target_link_libraries(${example_name}_gpu ${MPI_CXX_LINK_FLAGS} ${MPI_CXX_LIBRARIES} ${OpenMP_CXX_FLAGS})

    ### add to custom targets
    add_dependencies(${example_name} ${example_name}_gpu)
    add_dependencies(gpu ${example_name}_gpu)
    message(STATUS "GPU executable added: " ${example_name})
  endif (BUILD_GPU)
endforeach (example_src ${EXAMPLE_SRCS})


